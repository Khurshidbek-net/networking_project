// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Warehouse {
  id            String      @id @default(uuid())
  name          String
  address       String?
  totalCapacity Int?        @map("total_capacity")
  usedCapacity  Int?        @default(0) @map("used_capacity")
  zones         Json?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  inventory     Inventory[]
  
  @@map("warehouses")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  parentId    String?   @map("parent_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  parent      Category? @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  products    Product[]
  
  @@map("categories")
}

model Product {
  id           String   @id @default(uuid())
  sku          String   @unique
  name         String
  description  String?
  categoryId   String?  @map("category_id")
  unitPrice    Decimal? @map("unit_price") @db.Decimal(10, 2)
  weight       Decimal? @db.Decimal(8, 2)
  dimensions   Json?
  minimumStock Int?     @default(0) @map("minimum_stock")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  category               Category?              @relation(fields: [categoryId], references: [id])
  inventory              Inventory[]
  orderItems             OrderItem[]
  inboundShipmentItems   InboundShipmentItem[]
  inventoryAdjustments   InventoryAdjustment[]
  inventoryReservations  InventoryReservation[]
  
  @@map("products")
}

model Inventory {
  id                String    @id @default(uuid())
  productId         String    @map("product_id")
  warehouseId       String    @map("warehouse_id")
  location          String?
  quantityAvailable Int       @default(0) @map("quantity_available")
  quantityReserved  Int       @default(0) @map("quantity_reserved")
  quantityTotal     Int       @default(0) @map("quantity_total")
  lastCounted       DateTime? @map("last_counted")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  
  @@unique([productId, warehouseId, location])
  @@map("inventory")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum OrderPriority {
  LOW
  MEDIUM
  HIGH
}

model Order {
  id              String        @id @default(uuid())
  orderNumber     String        @unique @map("order_number")
  customerName    String        @map("customer_name")
  customerEmail   String?       @map("customer_email")
  customerPhone   String?       @map("customer_phone")
  shippingAddress Json?         @map("shipping_address")
  status          OrderStatus   @default(PENDING)
  priority        OrderPriority @default(MEDIUM)
  totalValue      Decimal?      @map("total_value") @db.Decimal(12, 2)
  dueDate         DateTime?     @map("due_date")
  notes           String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  orderItems           OrderItem[]
  outboundShipments    OutboundShipment[]
  inventoryReservations InventoryReservation[]
  
  @@map("orders")
}

model OrderItem {
  id              String   @id @default(uuid())
  orderId         String   @map("order_id")
  productId       String   @map("product_id")
  quantityOrdered Int      @map("quantity_ordered")
  quantityPicked  Int      @default(0) @map("quantity_picked")
  unitPrice       Decimal? @map("unit_price") @db.Decimal(10, 2)
  totalPrice      Decimal? @map("total_price") @db.Decimal(12, 2)
  createdAt       DateTime @default(now()) @map("created_at")
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

enum ShipmentStatus {
  SCHEDULED
  IN_TRANSIT
  RECEIVED
  CANCELLED
}

model InboundShipment {
  id              String          @id @default(uuid())
  receivingId     String          @unique @map("receiving_id")
  supplierName    String          @map("supplier_name")
  supplierContact Json?           @map("supplier_contact")
  poNumber        String?         @map("po_number")
  expectedDate    DateTime?       @map("expected_date")
  receivedDate    DateTime?       @map("received_date")
  status          ShipmentStatus  @default(SCHEDULED)
  totalItems      Int?            @map("total_items")
  totalValue      Decimal?        @map("total_value") @db.Decimal(12, 2)
  notes           String?
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  
  items InboundShipmentItem[]
  
  @@map("inbound_shipments")
}

model InboundShipmentItem {
  id               String          @id @default(uuid())
  shipmentId       String          @map("shipment_id")
  productId        String          @map("product_id")
  quantityExpected Int             @map("quantity_expected")
  quantityReceived Int             @default(0) @map("quantity_received")
  unitCost         Decimal?        @map("unit_cost") @db.Decimal(10, 2)
  totalCost        Decimal?        @map("total_cost") @db.Decimal(12, 2)
  createdAt        DateTime        @default(now()) @map("created_at")
  
  shipment InboundShipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  product  Product         @relation(fields: [productId], references: [id])
  
  @@map("inbound_shipment_items")
}

enum OutboundStatus {
  PICKING
  PACKED
  READY
  SHIPPED
}

model OutboundShipment {
  id                String         @id @default(uuid())
  shipmentId        String         @unique @map("shipment_id")
  orderId           String         @map("order_id")
  carrier           String?
  trackingNumber    String?        @map("tracking_number")
  status            OutboundStatus @default(PICKING)
  pickerId          String?        @map("picker_id")
  packedBy          String?        @map("packed_by")
  shippedDate       DateTime?      @map("shipped_date")
  estimatedDelivery DateTime?      @map("estimated_delivery")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  
  order Order @relation(fields: [orderId], references: [id])
  
  @@map("outbound_shipments")
}

model InventoryAdjustment {
  id             String   @id @default(uuid())
  productId      String   @map("product_id")
  warehouseId    String   @map("warehouse_id")
  adjustmentType String   @map("adjustment_type") // 'increase', 'decrease', 'count'
  quantityBefore Int?     @map("quantity_before")
  quantityAfter  Int?     @map("quantity_after")
  quantityChange Int?     @map("quantity_change")
  reason         String?
  userId         String?  @map("user_id")
  createdAt      DateTime @default(now()) @map("created_at")
  
  product Product @relation(fields: [productId], references: [id])
  
  @@map("inventory_adjustments")
}

model InventoryReservation {
  id               String   @id @default(uuid())
  productId        String   @map("product_id")
  orderId          String   @map("order_id")
  quantityReserved Int      @map("quantity_reserved")
  reservedAt       DateTime @default(now()) @map("reserved_at")
  expiresAt        DateTime? @map("expires_at")
  status           String   @default("active") // 'active', 'fulfilled', 'expired'
  
  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("inventory_reservations")
}
